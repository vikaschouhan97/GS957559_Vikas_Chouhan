{"version":3,"file":"static/js/393.ad2b0d7c.chunk.js","mappings":"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","sources":["contents/planning/index.tsx","contents/sku/addSkuDialog.tsx","contents/sku/index.tsx","contents/store/addStoreDialog.tsx","contents/store/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport {\n  defaultColDef,\n  rightAlignRule,\n  cellClassRules,\n  excelLinkUrl,\n} from \"../../constants\";\n\n// Register AG Grid modules required for this component\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\n// Styled wrapper for the data grid\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const [gridApi, setGridApi] = useState<any>(null);\n  const { calendarData, fileAdded } = useSelector((state: RootState) => state.fileData);\n\n   useEffect(() => {\n      if (gridApi) {\n        onGridReady({ api: gridApi } as GridReadyEvent);\n      }\n    }, [fileAdded, gridApi]);\n\n  // Fetch and process Excel data on grid initialization\n  const onGridReady = async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n    try {\n      const localFile = localStorage.getItem(\"file\");\n      let blob: Blob;\n\n      if (localFile) {\n        // Convert base64 stored file back to a Blob\n        const base64Data = JSON.parse(localFile);\n        const byteCharacters = atob(base64Data.split(\",\")[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        blob = new Blob([byteArray], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n      } else {\n        // Fetch file from a predefined URL if not found in local storage\n        const response = await fetch(excelLinkUrl);\n        blob = await response.blob();\n      }\n\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Extract data from relevant worksheets\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          };\n        });\n\n        // Create a lookup map for Store labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label;\n        });\n\n        // Organize Calendar data by Month and Week\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Integrate Planning data and calculate financial metrics\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0;\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits;\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort data to ensure consistent ordering\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean)\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        // Update Redux store with processed data\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Initialize row data from Redux state\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  // Update row data when calendar data changes\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  // Define AG Grid column definitions\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...(calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: { value: number }) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: { value: number }) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    })),\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n","import { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { setAddSkuDialog, setSkuData } from \"../../slices/excelData\";\n\nexport default function AddSkuDialog() {\n  const dispatch = useDispatch();\n  const { addSkuDialog, skuData } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // State for form fields\n  const [sku, setSku] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [cost, setCost] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  // Validation states\n  const [error, setError] = useState(\"\");\n\n  // Check if ID already exists\n  const isIdExists = (id: string) =>\n    skuData.some((item: any) => item.ID === id);\n\n  const handleClose = () => {\n    dispatch(setAddSkuDialog(false));\n    setSku(\"\");\n    setPrice(\"\");\n    setCost(\"\");\n    setId(\"\");\n    setError(\"\");\n  };\n\n  const handleSave = () => {\n    if (!sku || !price || !cost || !id) {\n      setError(\"All fields are required.\");\n      return;\n    }\n    if (isIdExists(id)) {\n      setError(\"ID already exists. Please use a unique ID.\");\n      return;\n    }\n    if (isNaN(Number(price)) || isNaN(Number(cost))) {\n      setError(\"Price and Cost must be valid numbers.\");\n      return;\n    }\n    dispatch(\n      setSkuData([\n        ...skuData,\n        { ID: id, name: sku, price: parseFloat(price), cost: parseFloat(cost) },\n      ])\n    );\n    handleClose();\n  };\n\n  return (\n    <Dialog open={addSkuDialog} onClose={handleClose}>\n      <DialogTitle>Add New SKU</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"SKU\"\n          fullWidth\n          margin=\"dense\"\n          value={sku}\n          onChange={(e) => setSku(e.target.value)}\n        />\n        <TextField\n          label=\"Price ($)\"\n          fullWidth\n          margin=\"dense\"\n          value={price}\n          onChange={(e) => setPrice(e.target.value)}\n          error={isNaN(Number(price))}\n          helperText={isNaN(Number(price)) ? \"Enter a valid price\" : \"\"}\n        />\n        <TextField\n          label=\"Cost ($)\"\n          fullWidth\n          margin=\"dense\"\n          value={cost}\n          onChange={(e) => setCost(e.target.value)}\n          error={isNaN(Number(cost))}\n          helperText={isNaN(Number(cost)) ? \"Enter a valid cost\" : \"\"}\n        />\n        <TextField\n          label=\"ID\"\n          fullWidth\n          margin=\"dense\"\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          error={!!error}\n          helperText={error}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          sx={{\n            background: \"red\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"red\", opacity: 0.7 },\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          sx={{\n            background: \"gray\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"gray\", opacity: 0.7 },\n          }}\n          disabled={!sku || !price || !cost || !id}\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextEditorModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, Button } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ISkuData, setAddSkuDialog, setSkuData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"../store/index.css\";\nimport { DeleteButtonRenderer } from \"../store\";\nimport { excelLinkUrl } from \"../../constants\";\nimport AddSkuDialog from \"./addSkuDialog\";\n\n// Register AG Grid modules for features like filtering, row dragging, validation, and editing\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  NumberEditorModule,\n  TextEditorModule,\n  RowApiModule,\n]);\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n  const [gridApi, setGridApi] = useState<any>(null);\n  const { skuData, fileAdded } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // Memoized styles to prevent unnecessary re-renders\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  // Column definitions for the AG Grid\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\",\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer, // Custom delete button component\n    },\n    { headerName: \"SKU\", field: \"name\", width: 300, editable: true },\n    { headerName: \"Price\", field: \"price\", width: 150, editable: true },\n    { headerName: \"Cost\", field: \"cost\", width: 150, editable: true },\n  ]);\n\n  // Handles cell value updates and updates Redux state\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = skuData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setSkuData(newData));\n    } else return;\n  };\n\n  // Default column definition for all columns\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter, // Assign custom value setter\n  };\n\n  useEffect(() => {\n    if (gridApi) {\n      onGridReady({ api: gridApi } as GridReadyEvent);\n    }\n  }, [fileAdded, gridApi]);\n\n  // Handles grid initialization and data fetching\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    // Check if a file is stored in localStorage\n    const localFile = localStorage.getItem(\"file\");\n    let blob: Blob;\n\n    if (localFile) {\n      // Convert Base64 string to Blob\n      const base64Data = JSON.parse(localFile);\n      const byteCharacters = atob(base64Data.split(\",\")[1]); // Decode Base64\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      blob = new Blob([byteArray], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n    } else {\n      // Fetch the default Excel file from the server\n      const response = await fetch(excelLinkUrl);\n      blob = await response.blob();\n    }\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read the \"SKUs\" worksheet from the Excel file\n      const storesSheet = workbook.Sheets[\"SKUs\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data into a structured array\n      const formattedStoreData: ISkuData[] = storeData.map((row) => ({\n        ID: row[\"ID\"],\n        name: row[\"Label\"],\n        price: row[\"Price\"],\n        cost: row[\"Cost\"].toFixed(2), // Ensure cost is formatted correctly\n      }));\n\n      // Update Redux state with the formatted data\n      dispatch(setSkuData(formattedStoreData));\n    };\n\n    // Read the file as an ArrayBuffer\n    reader.readAsArrayBuffer(blob);\n  }, []);\n\n  // Handles reordering of rows after dragging\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    // Reorder rows and update Redux state\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1,\n      }));\n\n    dispatch(setSkuData(newOrder));\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={skuData} // Data for the grid\n            columnDefs={columnDefs} // Column definitions\n            //@ts-ignore\n            defaultColDef={defaultColDef} // Default column behavior\n            rowDragManaged={true} // Enable drag-and-drop row reordering\n            onGridReady={onGridReady} // Callback when grid is ready\n            onDragStopped={onDragStopped} // Handle row drag stop event\n          />\n        </Box>\n      </Box>\n      {/* Button to open the 'Add SKU' dialog */}\n      <Button\n        onClick={() => dispatch(setAddSkuDialog(true))}\n        sx={{\n          mt: 2,\n          background: \"gray\",\n          color: \"#ffff\",\n          px: 2,\n          \"&:hover\": { background: \"gray\", opacity: 0.7 },\n        }}\n      >\n        Add SKU\n      </Button>\n      {/* Dialog component to add a new SKU */}\n      <AddSkuDialog />\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { setAddStoreDialog, setStoreData } from \"../../slices/excelData\";\n\nexport default function AddStoreDialog() {\n  const dispatch = useDispatch();\n  const { addStoreDialog, storeData } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // State for form fields\n  const [store, setStore] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  // Validation states\n  const [error, setError] = useState(\"\");\n\n  // Check if ID already exists\n  const isIdExists = (id: string) =>\n    storeData.some((item: any) => item.ID === id);\n\n  const handleClose = () => {\n    dispatch(setAddStoreDialog(false));\n    setStore(\"\");\n    setCity(\"\");\n    setState(\"\");\n    setId(\"\");\n    setError(\"\");\n  };\n\n  const handleSave = () => {\n    if (!store || !city || !state || !id) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    if (isIdExists(id)) {\n      setError(\"ID already exists. Please use a unique ID.\");\n      return;\n    }\n\n    dispatch(\n      setStoreData([\n        ...storeData,\n        {\n          seqNo: storeData.length + 1,\n          City: city,\n          State: state,\n          Label: store,\n          ID: id,\n        },\n      ])\n    );\n\n    handleClose();\n  };\n\n  return (\n    <Dialog open={addStoreDialog} onClose={handleClose}>\n      <DialogTitle>Add New Store</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Store\"\n          fullWidth\n          margin=\"dense\"\n          value={store}\n          onChange={(e) => setStore(e.target.value)}\n        />\n        <TextField\n          label=\"City\"\n          fullWidth\n          margin=\"dense\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n        />\n        <TextField\n          label=\"State\"\n          fullWidth\n          margin=\"dense\"\n          value={state}\n          onChange={(e) => setState(e.target.value)}\n        />\n        <TextField\n          label=\"ID\"\n          fullWidth\n          margin=\"dense\"\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          error={!!error}\n          helperText={error}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          sx={{\n            background: \"red\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"red\", opacity: 0.7 },\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          sx={{\n            background: \"gray\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"gray\", opacity: 0.7 },\n          }}\n          disabled={!store || !city || !state || !id}\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, Button, IconButton } from \"@mui/material\";\nimport DeleteForeverSharpIcon from \"@mui/icons-material/DeleteForeverSharp\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  IStoreData,\n  setAddStoreDialog,\n  setStoreData,\n} from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"./index.css\";\nimport { excelLinkUrl } from \"../../constants\";\nimport AddStoreDialog from \"./addStoreDialog\";\n\n// Register AG Grid modules\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  RowApiModule,\n]);\n\n// Custom delete button renderer component for the grid\nexport const DeleteButtonRenderer = (props: any) => {\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n  const dispatch = useDispatch();\n\n  // Function to handle deleting a row\n  const handleDelete = () => {\n    const updatedData = storeData\n      .filter((item: any) => item.ID !== props.data.ID)\n      .map((item, index) => ({\n        ...item,\n        seqNo: index + 1, // Reassign sequence numbers after deletion\n      }));\n\n    dispatch(setStoreData(updatedData));\n  };\n\n  return (\n    <IconButton onClick={handleDelete} size=\"small\">\n      <DeleteForeverSharpIcon />\n    </IconButton>\n  );\n};\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n  const { storeData, fileAdded } = useSelector((state: RootState) => state.fileData);\n  const [gridApi, setGridApi] = useState<any>(null);\n\n  // Memoized styles to optimize performance\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  // Column definitions for AG Grid\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\", // Empty header for delete button column\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer,\n    },\n    {\n      headerName: \"S.No.\",\n      field: \"seqNo\",\n      width: 100,\n      rowDrag: true, // Enable row dragging\n    },\n    { headerName: \"Store ID\", field: \"ID\", width: 150, editable: true },\n    { headerName: \"Store Name\", field: \"Label\", width: 250, editable: true },\n    { headerName: \"City\", field: \"City\", width: 200, editable: true },\n    { headerName: \"State\", field: \"State\", width: 100, editable: true },\n  ]);\n\n  // Function to update store data on cell value change\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = storeData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setStoreData(newData));\n    }\n  };\n\n  // Default column definitions\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter,\n  };\n\n  useEffect(() => {\n    if (gridApi) {\n      onGridReady({ api: gridApi } as GridReadyEvent);\n    }\n  }, [fileAdded, gridApi]);\n\n  // Function to handle grid initialization and loading data\n  const onGridReady = useCallback(\n    async (params: GridReadyEvent) => {\n      setGridApi(params.api);\n\n      // Retrieve file data from localStorage if available\n      const localFile = localStorage.getItem(\"file\");\n      let blob: Blob;\n\n      if (localFile) {\n        const base64Data = JSON.parse(localFile);\n        const byteCharacters = atob(base64Data.split(\",\")[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        blob = new Blob([byteArray], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n      } else {\n        // Fetch default Excel file if local data is unavailable\n        const response = await fetch(excelLinkUrl);\n        blob = await response.blob();\n      }\n\n      if (!blob) return;\n\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        const binaryStr = e.target?.result as string;\n        const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n        // Read \"Stores\" worksheet from Excel file\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        // Format the data\n        const formattedStoreData: IStoreData[] = storeData.map(\n          (row, index) => ({\n            seqNo: row[\"Seq No.\"] || index + 1,\n            ID: row[\"ID\"],\n            Label: row[\"Label\"],\n            City: row[\"City\"],\n            State: row[\"State\"],\n          })\n        );\n        dispatch(setStoreData(formattedStoreData));\n      };\n\n      reader.readAsArrayBuffer(blob);\n    },\n    [fileAdded, dispatch]\n  );\n\n  // Function to update sequence numbers when row dragging stops\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1,\n      }));\n\n    dispatch(setStoreData(newOrder));\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={storeData}\n            columnDefs={columnDefs}\n            //@ts-ignore\n            defaultColDef={defaultColDef}\n            rowDragManaged={true}\n            onGridReady={onGridReady}\n            onDragStopped={onDragStopped}\n          />\n        </Box>\n      </Box>\n      <Button\n        onClick={() => dispatch(setAddStoreDialog(true))}\n        sx={{\n          mt: 2,\n          background: \"gray\",\n          color: \"#ffff\",\n          px: 2,\n          \"&:hover\": { background: \"gray\", opacity: 0.7 },\n        }}\n      >\n        Add Store\n      </Button>\n      <AddStoreDialog />\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","dispatch","useDispatch","currentMonthIndex","useState","gridApi","setGridApi","calendarData","fileAdded","useSelector","state","fileData","useEffect","onGridReady","api","async","params","localFile","localStorage","getItem","blob","base64Data","JSON","parse","byteCharacters","atob","split","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","response","fetch","excelLinkUrl","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","headerName","children","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","map","month","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console","rowData","setRowData","items","flat","_calendarData$current3","_calendarData$current4","columnDefs","field","pinned","_month$children","item","cellStyle","rightAlignRule","valueFormatter","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","AddSkuDialog","addSkuDialog","skuData","sku","setSku","setPrice","setCost","id","setId","setError","handleClose","setAddSkuDialog","_jsxs","Dialog","open","onClose","DialogTitle","DialogContent","TextField","label","fullWidth","margin","onChange","isNaN","Number","helperText","DialogActions","Button","onClick","sx","color","opacity","handleSave","some","isIdExists","setSkuData","name","disabled","TextFilterModule","NumberFilterModule","RowDragModule","ValidationModule","RowApiModule","GridExample","containerStyle","useMemo","gridStyle","cellRenderer","DeleteButtonRenderer","editable","valueSetter","rowId","data","columnId","column","colId","newValue","newData","useCallback","binaryStr","formattedStoreData","onDragStopped","_gridApi$getRenderedN","newOrder","getRenderedNodes","node","index","seqNo","style","rowDragManaged","mt","px","AddStoreDialog","addStoreDialog","store","setStore","city","setCity","setState","setAddStoreDialog","setStoreData","City","State","props","IconButton","handleDelete","updatedData","size","DeleteForeverSharpIcon","rowDrag"],"sourceRoot":""}