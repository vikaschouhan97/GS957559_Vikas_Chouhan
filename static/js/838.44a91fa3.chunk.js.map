{"version":3,"file":"static/js/838.44a91fa3.chunk.js","mappings":"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","sources":["contents/charts/index.tsx","contents/planning/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { AgCharts } from \"ag-charts-react\";\nimport * as XLSX from \"xlsx\";\nimport {\n  AgBarSeriesOptions,\n  AgCategoryAxisOptions,\n  AgChartOptions,\n  AgLineSeriesOptions,\n  AgNumberAxisOptions,\n} from \"ag-charts-community\";\nimport { MainWrapper } from \"../planning\";\nimport { IStoreData, setStoreData } from \"../../slices/excelData\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\n{\n  /* eslint-disable */\n}\nconst ChartExample = () => {\n  const [currentData, setCurrentData] = useState<{ [key: string]: any[] }>({});\n  const [selectedStore, setSelectedStore] = useState<string>(\"\");\n\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n\n  const dispatch = useDispatch();\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const data = new Uint8Array(e.target?.result as ArrayBuffer);\n      const workbook = XLSX.read(data, { type: \"array\" });\n      const planningSheet: any = XLSX.utils.sheet_to_json(\n        workbook.Sheets[\"Planning\"],\n        { header: 1 }\n      );\n      const skuSheet = XLSX.utils.sheet_to_json(workbook.Sheets[\"SKUs\"], {\n        header: 1,\n      });\n\n      // Read \"Stores\" worksheet\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data\n      const formattedStoreData: IStoreData[] = storeData.map((row, index) => ({\n        seqNo: row[\"Seq No.\"] || index + 1,\n        ID: row[\"ID\"],\n        Label: row[\"Label\"],\n        City: row[\"City\"],\n        State: row[\"State\"],\n      }));\n      dispatch(setStoreData(formattedStoreData));\n\n      const skuMap: any = skuSheet.reduce((acc: any, row: any) => {\n        acc[row[0]] = { price: row[4], cost: row[5] };\n        return acc;\n      }, {});\n\n      const storeAggregatedData: any = {};\n      for (let i = 1; i < planningSheet.length; i++) {\n        const [store, sku, week, salesUnits] = planningSheet[i];\n        if (!skuMap[sku]) continue;\n        const { price, cost } = skuMap[sku];\n\n        const salesDollars = salesUnits * price;\n        const gmDollars = salesDollars - salesUnits * cost;\n        const gmPercent = salesDollars ? gmDollars / salesDollars : 0;\n\n        if (!storeAggregatedData[store]) storeAggregatedData[store] = {};\n        if (!storeAggregatedData[store][week])\n          storeAggregatedData[store][week] = {\n            gmDollars: 0,\n            gmPercent: 0,\n            count: 0,\n          };\n\n        storeAggregatedData[store][week].gmDollars += gmDollars;\n        storeAggregatedData[store][week].gmPercent += gmPercent;\n        storeAggregatedData[store][week].count++;\n      }\n\n      const formattedData: { [key: string]: any[] } = {};\n      Object.keys(storeAggregatedData).forEach((store) => {\n        formattedData[store] = Object.keys(storeAggregatedData[store]).map(\n          (week) => ({\n            week,\n            gmDollars: storeAggregatedData[store][week].gmDollars,\n            gmPercent:\n              storeAggregatedData[store][week].gmPercent /\n              storeAggregatedData[store][week].count,\n          })\n        );\n      });\n      console.log(\"formattedData\", { ...formattedData });\n      setCurrentData(formattedData);\n      setSelectedStore(Object.keys(formattedData)[0] || \"\");\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const chartData = currentData[selectedStore] || [];\n\n  const options: AgChartOptions = {\n    title: { text: \"Gross Margin\" },\n    data: chartData,\n    series: [\n      {\n        type: \"bar\",\n        xKey: \"week\",\n        yKey: \"gmDollars\",\n        yName: \"GM Dollars\",\n      } as AgBarSeriesOptions,\n      {\n        type: \"line\",\n        xKey: \"week\",\n        yKey: \"gmPercent\",\n        yName: \"GM %\",\n      } as AgLineSeriesOptions,\n    ],\n    axes: [\n      {\n        type: \"category\",\n        position: \"bottom\",\n        label: { rotation: -90 },\n      } as AgCategoryAxisOptions,\n      {\n        type: \"number\",\n        position: \"left\",\n        keys: [\"gmDollars\"],\n        tick: { count: 10 },\n      } as AgNumberAxisOptions,\n      {\n        type: \"number\",\n        position: \"right\",\n        keys: [\"gmPercent\"],\n        label: { format: \".0%\" },\n        tick: { count: 10 },\n      } as AgNumberAxisOptions,\n    ],\n  };\n\n  return (\n    <MainWrapper>\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileUpload} />\n        {Object.keys(currentData).length > 0 && (\n          <>\n            <label>Select Store: </label>\n            <select\n              value={selectedStore}\n              onChange={(e) => setSelectedStore(e.target.value)}\n            >\n              {Object.keys(currentData).map((store) => (\n                <option key={store} value={store}>\n                  {storeData?.find((s) => s.ID === store)?.Label}\n                </option>\n              ))}\n            </select>\n              <AgCharts options={options} style={{ width: \"100%\", height: \"95%\" }} />\n          </>\n        )}\n      </div>\n    </MainWrapper>\n  );\n};\n\nexport default ChartExample;\n","import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport { defaultColDef, rightAlignRule, cellClassRules, excelLinkUrl } from \"../../constants\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  const onGridReady = async () => {\n    try {\n      const response = await fetch(excelLinkUrl);\n      const blob = await response.blob();\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Read \"Calendar\" worksheet\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        // Read \"Planning\" worksheet\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        // Read \"SKUs\" worksheet to get prices\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          }; // Store SKU price\n        });\n\n        // Read \"Store\" worksheet to get Labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label; // Store SKU price\n        });\n\n        // Extract Month & Week order from Calendar sheet\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Merge Planning data into groupedData and compute Sales Dollar\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0; // Get price, default to 0 if not found\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits; // Compute Sales Dollar\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort by monthOrder and then by weekOrder\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean) // Remove undefined entries\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...((calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: {value: number}) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: {value: number}) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    }))),\n  ];\n  \n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n"],"names":["ChartExample","currentData","setCurrentData","useState","selectedStore","setSelectedStore","storeData","useSelector","state","fileData","dispatch","useDispatch","options","title","text","data","series","type","xKey","yKey","yName","axes","position","label","rotation","keys","tick","count","format","_jsx","MainWrapper","children","_jsxs","style","width","height","accept","onChange","event","_event$target$files","file","target","files","reader","FileReader","onload","e","_e$target","Uint8Array","result","workbook","XLSX","planningSheet","sheet_to_json","Sheets","header","skuSheet","storesSheet","formattedStoreData","map","row","index","seqNo","ID","Label","City","State","setStoreData","skuMap","reduce","acc","price","cost","storeAggregatedData","i","length","store","sku","week","salesUnits","salesDollars","gmDollars","gmPercent","formattedData","Object","forEach","console","log","readAsArrayBuffer","_Fragment","value","_storeData$find","find","s","AgCharts","ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","styled","Box","marginLeft","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","currentMonthIndex","calendarData","rowData","setRowData","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","month","_month$children","item","cellStyle","rightAlignRule","valueFormatter","params","concat","cellClassRules","AgGridReact","modules","debug","defaultColDef","onGridReady","async","response","fetch","excelLinkUrl","blob","arrayBuffer","calendarSheet","planningData","skusSheet","skusData","skuPriceMap","_ref","Price","Cost","parseFloat","storeMap","_ref2","monthOrder","weekOrder","groupedData","monthLabel","weekLabel","Week","includes","push","weekData","w","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","Math","trunc","values","monthData","SalesDollar","toFixed","sortedData","filter","Boolean","sort","a","b","indexOf","setCalendarData","error"],"sourceRoot":""}