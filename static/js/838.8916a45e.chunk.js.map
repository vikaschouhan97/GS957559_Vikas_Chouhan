{"version":3,"file":"static/js/838.8916a45e.chunk.js","mappings":"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","sources":["contents/charts/index.tsx","contents/planning/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgCharts } from \"ag-charts-react\";\nimport * as XLSX from \"xlsx\";\nimport {\n  AgBarSeriesOptions,\n  AgCategoryAxisOptions,\n  AgChartOptions,\n  AgLineSeriesOptions,\n  AgNumberAxisOptions,\n} from \"ag-charts-community\";\nimport { MainWrapper } from \"../planning\";\nimport { IStoreData, setStoreData } from \"../../slices/excelData\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { excelLinkUrl } from \"../../constants\";\n\nconst ChartExample = () => {\n  const [currentData, setCurrentData] = useState<{ [key: string]: any[] }>({});\n  const [selectedStore, setSelectedStore] = useState<string>(\"\");\n\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    handleFileUpload(); // Load and process the Excel file on component mount\n  }, []);\n\n  const handleFileUpload = async () => {\n    const localFile = localStorage.getItem(\"file\");\n    let blob: Blob;\n\n    // Retrieve file from local storage if available, otherwise fetch from external URL\n    if (localFile) {\n      const base64Data = JSON.parse(localFile);\n      const byteCharacters = atob(base64Data.split(\",\")[1]); // Decode Base64\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      blob = new Blob([byteArray], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n    } else {\n      const response = await fetch(excelLinkUrl);\n      blob = await response.blob();\n    }\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const data = new Uint8Array(e.target?.result as ArrayBuffer);\n      const workbook = XLSX.read(data, { type: \"array\" });\n\n      // Extract data from relevant sheets\n      const planningSheet: any = XLSX.utils.sheet_to_json(\n        workbook.Sheets[\"Planning\"],\n        { header: 1 }\n      );\n      const skuSheet = XLSX.utils.sheet_to_json(workbook.Sheets[\"SKUs\"], {\n        header: 1,\n      });\n\n      // Extract store data\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format store data for Redux state\n      const formattedStoreData: IStoreData[] = storeData.map((row, index) => ({\n        seqNo: row[\"Seq No.\"] || index + 1,\n        ID: row[\"ID\"],\n        Label: row[\"Label\"],\n        City: row[\"City\"],\n        State: row[\"State\"],\n      }));\n      dispatch(setStoreData(formattedStoreData));\n\n      // Create a mapping of SKU price and cost\n      const skuMap: any = skuSheet.reduce((acc: any, row: any) => {\n        acc[row[0]] = { price: row[4], cost: row[5] };\n        return acc;\n      }, {});\n\n      // Aggregate data by store and week\n      const storeAggregatedData: any = {};\n      for (let i = 1; i < planningSheet.length; i++) {\n        const [store, sku, week, salesUnits] = planningSheet[i];\n        if (!skuMap[sku]) continue;\n        const { price, cost } = skuMap[sku];\n\n        const salesDollars = salesUnits * price;\n        const gmDollars = salesDollars - salesUnits * cost;\n        const gmPercent = salesDollars ? gmDollars / salesDollars : 0;\n\n        if (!storeAggregatedData[store]) storeAggregatedData[store] = {};\n        if (!storeAggregatedData[store][week])\n          storeAggregatedData[store][week] = {\n            gmDollars: 0,\n            gmPercent: 0,\n            count: 0,\n          };\n\n        storeAggregatedData[store][week].gmDollars += gmDollars;\n        storeAggregatedData[store][week].gmPercent += gmPercent;\n        storeAggregatedData[store][week].count++;\n      }\n\n      // Format aggregated data for chart display\n      const formattedData: { [key: string]: any[] } = {};\n      Object.keys(storeAggregatedData).forEach((store) => {\n        formattedData[store] = Object.keys(storeAggregatedData[store]).map(\n          (week) => ({\n            week,\n            gmDollars: storeAggregatedData[store][week].gmDollars,\n            gmPercent:\n              storeAggregatedData[store][week].gmPercent /\n              storeAggregatedData[store][week].count,\n          })\n        );\n      });\n      setCurrentData(formattedData);\n      setSelectedStore(Object.keys(formattedData)[0] || \"\");\n    };\n    reader.readAsArrayBuffer(blob);\n  };\n\n  // Retrieve chart data for the selected store\n  const chartData = currentData[selectedStore] || [];\n\n  // Define chart configuration options\n  const options: AgChartOptions = {\n    title: { text: \"Gross Margin\" },\n    data: chartData,\n    series: [\n      {\n        type: \"bar\",\n        xKey: \"week\",\n        yKey: \"gmDollars\",\n        yName: \"GM Dollars\",\n      } as AgBarSeriesOptions,\n      {\n        type: \"line\",\n        xKey: \"week\",\n        yKey: \"gmPercent\",\n        yName: \"GM %\",\n      } as AgLineSeriesOptions,\n    ],\n    axes: [\n      {\n        type: \"category\",\n        position: \"bottom\",\n        label: { rotation: -90 },\n      } as AgCategoryAxisOptions,\n      {\n        type: \"number\",\n        position: \"left\",\n        keys: [\"gmDollars\"],\n        tick: { count: 10 },\n      } as AgNumberAxisOptions,\n      {\n        type: \"number\",\n        position: \"right\",\n        keys: [\"gmPercent\"],\n        label: { format: \".0%\" },\n        tick: { count: 10 },\n      } as AgNumberAxisOptions,\n    ],\n  };\n\n  return (\n    <MainWrapper>\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        {Object.keys(currentData).length > 0 && (\n          <>\n            <label>Select Store: </label>\n            <select\n              value={selectedStore}\n              onChange={(e) => setSelectedStore(e.target.value)}\n            >\n              {Object.keys(currentData).map((store) => (\n                <option key={store} value={store}>\n                  {storeData?.find((s) => s.ID === store)?.Label}\n                </option>\n              ))}\n            </select>\n            <AgCharts\n              options={options}\n              style={{ width: \"100%\", height: \"95%\" }}\n            />\n          </>\n        )}\n      </div>\n    </MainWrapper>\n  );\n};\n\nexport default ChartExample;\n","import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport {\n  defaultColDef,\n  rightAlignRule,\n  cellClassRules,\n  excelLinkUrl,\n} from \"../../constants\";\n\n// Register AG Grid modules required for this component\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\n// Styled wrapper for the data grid\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  // Fetch and process Excel data on grid initialization\n  const onGridReady = async () => {\n    try {\n      const localFile = localStorage.getItem(\"file\");\n      let blob: Blob;\n\n      if (localFile) {\n        // Convert base64 stored file back to a Blob\n        const base64Data = JSON.parse(localFile);\n        const byteCharacters = atob(base64Data.split(\",\")[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        blob = new Blob([byteArray], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n      } else {\n        // Fetch file from a predefined URL if not found in local storage\n        const response = await fetch(excelLinkUrl);\n        blob = await response.blob();\n      }\n\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Extract data from relevant worksheets\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          };\n        });\n\n        // Create a lookup map for Store labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label;\n        });\n\n        // Organize Calendar data by Month and Week\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Integrate Planning data and calculate financial metrics\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0;\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits;\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort data to ensure consistent ordering\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean)\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        // Update Redux store with processed data\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Initialize row data from Redux state\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  // Update row data when calendar data changes\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  // Define AG Grid column definitions\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...(calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: { value: number }) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: { value: number }) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    })),\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n"],"names":["ChartExample","currentData","setCurrentData","useState","selectedStore","setSelectedStore","storeData","useSelector","state","fileData","dispatch","useDispatch","useEffect","handleFileUpload","async","localFile","localStorage","getItem","blob","base64Data","JSON","parse","byteCharacters","atob","split","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","response","fetch","excelLinkUrl","reader","FileReader","onload","e","_e$target","data","target","result","workbook","XLSX","planningSheet","sheet_to_json","Sheets","header","skuSheet","storesSheet","formattedStoreData","map","row","index","seqNo","ID","Label","City","State","setStoreData","skuMap","reduce","acc","price","cost","storeAggregatedData","store","sku","week","salesUnits","salesDollars","gmDollars","gmPercent","count","formattedData","Object","keys","forEach","readAsArrayBuffer","options","title","text","series","xKey","yKey","yName","axes","position","label","rotation","tick","format","_jsx","MainWrapper","children","style","width","height","_jsxs","_Fragment","value","onChange","_storeData$find","find","s","AgCharts","ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","styled","Box","marginLeft","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","currentMonthIndex","calendarData","rowData","setRowData","items","flat","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","month","_month$children","item","cellStyle","rightAlignRule","valueFormatter","params","concat","cellClassRules","AgGridReact","modules","debug","defaultColDef","onGridReady","arrayBuffer","calendarSheet","planningData","skusSheet","skusData","skuPriceMap","_ref","Price","Cost","parseFloat","storeMap","_ref2","monthOrder","weekOrder","groupedData","monthLabel","weekLabel","Week","includes","push","weekData","w","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","Math","trunc","values","monthData","SalesDollar","toFixed","sortedData","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console"],"sourceRoot":""}