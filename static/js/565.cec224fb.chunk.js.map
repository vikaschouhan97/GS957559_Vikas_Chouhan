{"version":3,"file":"static/js/565.cec224fb.chunk.js","mappings":"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","sources":["contents/planning/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport {\n  defaultColDef,\n  rightAlignRule,\n  cellClassRules,\n  excelLinkUrl,\n} from \"../../constants\";\n\n// Register AG Grid modules required for this component\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\n// Styled wrapper for the data grid\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  // Fetch and process Excel data on grid initialization\n  const onGridReady = async () => {\n    try {\n      const localFile = localStorage.getItem(\"file\");\n      let blob: Blob;\n\n      if (localFile) {\n        // Convert base64 stored file back to a Blob\n        const base64Data = JSON.parse(localFile);\n        const byteCharacters = atob(base64Data.split(\",\")[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        blob = new Blob([byteArray], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n      } else {\n        // Fetch file from a predefined URL if not found in local storage\n        const response = await fetch(excelLinkUrl);\n        blob = await response.blob();\n      }\n\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Extract data from relevant worksheets\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          };\n        });\n\n        // Create a lookup map for Store labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label;\n        });\n\n        // Organize Calendar data by Month and Week\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Integrate Planning data and calculate financial metrics\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0;\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits;\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort data to ensure consistent ordering\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean)\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        // Update Redux store with processed data\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Initialize row data from Redux state\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  // Update row data when calendar data changes\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  // Define AG Grid column definitions\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...(calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: { value: number }) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: { value: number }) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    })),\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","dispatch","useDispatch","currentMonthIndex","useState","calendarData","useSelector","state","fileData","rowData","setRowData","children","map","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","month","_month$children","item","cellStyle","rightAlignRule","valueFormatter","params","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","onGridReady","async","localFile","localStorage","getItem","blob","base64Data","JSON","parse","byteCharacters","atob","split","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","response","fetch","excelLinkUrl","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console"],"sourceRoot":""}