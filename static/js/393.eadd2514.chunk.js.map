{"version":3,"file":"static/js/393.eadd2514.chunk.js","mappings":"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","sources":["contents/planning/index.tsx","contents/sku/addSkuDialog.tsx","contents/sku/index.tsx","contents/store/addStoreDialog.tsx","contents/store/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport { defaultColDef, rightAlignRule, cellClassRules, excelLinkUrl } from \"../../constants\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  const onGridReady = async () => {\n    try {\n      const response = await fetch(excelLinkUrl);\n      const blob = await response.blob();\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Read \"Calendar\" worksheet\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        // Read \"Planning\" worksheet\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        // Read \"SKUs\" worksheet to get prices\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          }; // Store SKU price\n        });\n\n        // Read \"Store\" worksheet to get Labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label; // Store SKU price\n        });\n\n        // Extract Month & Week order from Calendar sheet\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Merge Planning data into groupedData and compute Sales Dollar\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0; // Get price, default to 0 if not found\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits; // Compute Sales Dollar\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort by monthOrder and then by weekOrder\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean) // Remove undefined entries\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...((calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: {value: number}) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: {value: number}) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    }))),\n  ];\n  \n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n","import { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { setAddSkuDialog, setSkuData } from \"../../slices/excelData\";\n\nexport default function AddSkuDialog() {\n  const dispatch = useDispatch();\n  const { addSkuDialog, skuData } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // State for form fields\n  const [sku, setSku] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [cost, setCost] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  // Validation states\n  const [error, setError] = useState(\"\");\n\n  // Check if ID already exists\n  const isIdExists = (id: string) =>\n    skuData.some((item: any) => item.ID === id);\n\n  const handleClose = () => {\n    dispatch(setAddSkuDialog(false));\n    setSku(\"\");\n    setPrice(\"\");\n    setCost(\"\");\n    setId(\"\");\n    setError(\"\");\n  };\n\n  const handleSave = () => {\n    if (!sku || !price || !cost || !id) {\n      setError(\"All fields are required.\");\n      return;\n    }\n    if (isIdExists(id)) {\n      setError(\"ID already exists. Please use a unique ID.\");\n      return;\n    }\n    if (isNaN(Number(price)) || isNaN(Number(cost))) {\n      setError(\"Price and Cost must be valid numbers.\");\n      return;\n    }\n    dispatch(\n      setSkuData([\n        ...skuData,\n        { ID: id, name: sku, price: parseFloat(price), cost: parseFloat(cost) },\n      ])\n    );\n    handleClose();\n  };\n\n  return (\n    <Dialog open={addSkuDialog} onClose={handleClose}>\n      <DialogTitle>Add New SKU</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"SKU\"\n          fullWidth\n          margin=\"dense\"\n          value={sku}\n          onChange={(e) => setSku(e.target.value)}\n        />\n        <TextField\n          label=\"Price ($)\"\n          fullWidth\n          margin=\"dense\"\n          value={price}\n          onChange={(e) => setPrice(e.target.value)}\n          error={isNaN(Number(price))}\n          helperText={isNaN(Number(price)) ? \"Enter a valid price\" : \"\"}\n        />\n        <TextField\n          label=\"Cost ($)\"\n          fullWidth\n          margin=\"dense\"\n          value={cost}\n          onChange={(e) => setCost(e.target.value)}\n          error={isNaN(Number(cost))}\n          helperText={isNaN(Number(cost)) ? \"Enter a valid cost\" : \"\"}\n        />\n        <TextField\n          label=\"ID\"\n          fullWidth\n          margin=\"dense\"\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          error={!!error}\n          helperText={error}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          sx={{\n            background: \"red\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"red\", opacity: 0.7 },\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          sx={{\n            background: \"gray\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"gray\", opacity: 0.7 },\n          }}\n          disabled={!sku || !price || !cost || !id}\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextEditorModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, Button } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ISkuData, setAddSkuDialog, setSkuData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"../store/index.css\";\nimport { DeleteButtonRenderer } from \"../store\";\nimport { excelLinkUrl } from \"../../constants\";\nimport AddSkuDialog from \"./addSkuDialog\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  NumberEditorModule,\n  TextEditorModule,\n  RowApiModule,\n]);\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n  const [gridApi, setGridApi] = useState<any>(null);\n  const { skuData } = useSelector((state: RootState) => state.fileData);\n\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\",\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer,\n    },\n    { headerName: \"SKU\", field: \"name\", width: 300, editable: true },\n    { headerName: \"Price\", field: \"price\", width: 150, editable: true },\n    { headerName: \"Cost\", field: \"cost\", width: 150, editable: true },\n  ]);\n\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = skuData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setSkuData(newData));\n    } else return;\n  };\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter,\n  };\n\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    const response = await fetch(excelLinkUrl);\n    const blob = await response.blob();\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read \"Stores\" worksheet\n      const storesSheet = workbook.Sheets[\"SKUs\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data\n      const formattedStoreData: ISkuData[] = storeData.map((row) => ({\n        ID: row[\"ID\"],\n        name: row[\"Label\"],\n        price: row[\"Price\"],\n        cost: row[\"Cost\"].toFixed(2),\n      }));\n      dispatch(setSkuData(formattedStoreData));\n    };\n\n    reader.readAsArrayBuffer(blob);\n  }, []);\n\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1, // Recalculate sequence numbers\n      }));\n\n    dispatch(setSkuData(newOrder)); // Update Redux state\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={skuData}\n            columnDefs={columnDefs}\n            //@ts-ignore\n            defaultColDef={defaultColDef}\n            rowDragManaged={true}\n            onGridReady={onGridReady}\n            onDragStopped={onDragStopped}\n          />\n        </Box>\n      </Box>\n      <Button\n        onClick={() => dispatch(setAddSkuDialog(true))}\n        sx={{\n          mt: 2,\n          background: \"gray\",\n          color: \"#ffff\",\n          px: 2,\n          \"&:hover\": { background: \"gray\", opacity: 0.7 },\n        }}\n      >\n        Add SKU\n      </Button>\n      <AddSkuDialog />\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { setAddStoreDialog, setStoreData } from \"../../slices/excelData\";\n\nexport default function AddStoreDialog() {\n  const dispatch = useDispatch();\n  const { addStoreDialog, storeData } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // State for form fields\n  const [store, setStore] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  // Validation states\n  const [error, setError] = useState(\"\");\n\n  // Check if ID already exists\n  const isIdExists = (id: string) =>\n    storeData.some((item: any) => item.ID === id);\n\n  const handleClose = () => {\n    dispatch(setAddStoreDialog(false));\n    setStore(\"\");\n    setCity(\"\");\n    setState(\"\");\n    setId(\"\");\n    setError(\"\");\n  };\n\n  const handleSave = () => {\n    if (!store || !city || !state || !id) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    if (isIdExists(id)) {\n      setError(\"ID already exists. Please use a unique ID.\");\n      return;\n    }\n\n    dispatch(\n      setStoreData([\n        ...storeData,\n        {\n          seqNo: storeData.length + 1,\n          City: city,\n          State: state,\n          Label: store,\n          ID: id,\n        },\n      ])\n    );\n\n    handleClose();\n  };\n\n  return (\n    <Dialog open={addStoreDialog} onClose={handleClose}>\n      <DialogTitle>Add New Store</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Store\"\n          fullWidth\n          margin=\"dense\"\n          value={store}\n          onChange={(e) => setStore(e.target.value)}\n        />\n        <TextField\n          label=\"City\"\n          fullWidth\n          margin=\"dense\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n        />\n        <TextField\n          label=\"State\"\n          fullWidth\n          margin=\"dense\"\n          value={state}\n          onChange={(e) => setState(e.target.value)}\n        />\n        <TextField\n          label=\"ID\"\n          fullWidth\n          margin=\"dense\"\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          error={!!error}\n          helperText={error}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          sx={{\n            background: \"red\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"red\", opacity: 0.7 },\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          sx={{\n            background: \"gray\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"gray\", opacity: 0.7 },\n          }}\n          disabled={!store || !city || !state || !id}\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, Button, IconButton } from \"@mui/material\";\nimport DeleteForeverSharpIcon from \"@mui/icons-material/DeleteForeverSharp\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  IStoreData,\n  setAddStoreDialog,\n  setStoreData,\n} from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"./index.css\";\nimport { excelLinkUrl } from \"../../constants\";\nimport AddStoreDialog from \"./addStoreDialog\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  RowApiModule,\n]);\n\nexport const DeleteButtonRenderer = (props: any) => {\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    const updatedData = storeData\n      .filter((item: any) => item.ID !== props.data.ID)\n      .map((item, index) => ({\n        ...item,\n        seqNo: index + 1,\n      }));\n\n    dispatch(setStoreData(updatedData));\n  };\n  return (\n    <IconButton onClick={handleDelete} size=\"small\">\n      <DeleteForeverSharpIcon />\n    </IconButton>\n  );\n};\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\",\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer,\n    },\n    {\n      headerName: \"S.No.\",\n      field: \"seqNo\",\n      width: 100,\n      rowDrag: true,\n    },\n    { headerName: \"Store ID\", field: \"ID\", width: 150, editable: true },\n    { headerName: \"Store Name\", field: \"Label\", width: 250, editable: true },\n    { headerName: \"City\", field: \"City\", width: 200, editable: true },\n    { headerName: \"State\", field: \"State\", width: 100, editable: true },\n  ]);\n\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = storeData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setStoreData(newData));\n    } else return;\n  };\n\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter,\n  };\n\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    const response = await fetch(excelLinkUrl);\n    const blob = await response.blob();\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read \"Stores\" worksheet\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data\n      const formattedStoreData: IStoreData[] = storeData.map((row, index) => ({\n        seqNo: row[\"Seq No.\"] || index + 1,\n        ID: row[\"ID\"],\n        Label: row[\"Label\"],\n        City: row[\"City\"],\n        State: row[\"State\"],\n      }));\n      dispatch(setStoreData(formattedStoreData));\n    };\n\n    reader.readAsArrayBuffer(blob);\n  }, []);\n\n  const [gridApi, setGridApi] = useState<any>(null);\n\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1, // Recalculate sequence numbers\n      }));\n\n    dispatch(setStoreData(newOrder)); // Update Redux state\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={storeData}\n            columnDefs={columnDefs}\n            //@ts-ignore\n            defaultColDef={defaultColDef}\n            rowDragManaged={true}\n            onGridReady={onGridReady}\n            onDragStopped={onDragStopped}\n          />\n        </Box>\n      </Box>\n      <Button\n        onClick={() => dispatch(setAddStoreDialog(true))}\n        sx={{\n          mt: 2,\n          background: \"gray\",\n          color: \"#ffff\",\n          px: 2,\n          \"&:hover\": { background: \"gray\", opacity: 0.7 },\n        }}\n      >\n        Add Store\n      </Button>\n      <AddStoreDialog />\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","dispatch","useDispatch","currentMonthIndex","useState","calendarData","useSelector","state","fileData","rowData","setRowData","children","map","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","month","_month$children","item","cellStyle","rightAlignRule","valueFormatter","params","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","onGridReady","async","response","fetch","excelLinkUrl","blob","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","Uint8Array","type","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console","AddSkuDialog","addSkuDialog","skuData","sku","setSku","setPrice","setCost","id","setId","setError","handleClose","setAddSkuDialog","_jsxs","Dialog","open","onClose","DialogTitle","DialogContent","TextField","label","fullWidth","margin","onChange","isNaN","Number","helperText","DialogActions","Button","onClick","sx","color","opacity","handleSave","some","isIdExists","setSkuData","name","disabled","TextFilterModule","NumberFilterModule","RowDragModule","ValidationModule","RowApiModule","GridExample","gridApi","setGridApi","containerStyle","useMemo","gridStyle","cellRenderer","DeleteButtonRenderer","editable","valueSetter","rowId","data","columnId","column","colId","newValue","newData","useCallback","api","binaryStr","formattedStoreData","onDragStopped","_gridApi$getRenderedN","newOrder","getRenderedNodes","node","index","seqNo","style","rowDragManaged","mt","px","AddStoreDialog","addStoreDialog","store","setStore","city","setCity","setState","setAddStoreDialog","setStoreData","length","City","State","props","IconButton","handleDelete","updatedData","size","DeleteForeverSharpIcon","rowDrag"],"sourceRoot":""}