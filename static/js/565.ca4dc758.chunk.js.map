{"version":3,"file":"static/js/565.ca4dc758.chunk.js","mappings":"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","sources":["contents/planning/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport {\n  defaultColDef,\n  rightAlignRule,\n  cellClassRules,\n  excelLinkUrl,\n} from \"../../constants\";\n\n// Register AG Grid modules required for this component\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\n// Styled wrapper for the data grid\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const [gridApi, setGridApi] = useState<any>(null);\n  const { calendarData, fileAdded } = useSelector((state: RootState) => state.fileData);\n\n   useEffect(() => {\n      if (gridApi) {\n        onGridReady({ api: gridApi } as GridReadyEvent);\n      }\n    }, [fileAdded, gridApi]);\n\n  // Fetch and process Excel data on grid initialization\n  const onGridReady = async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n    try {\n      const localFile = localStorage.getItem(\"file\");\n      let blob: Blob;\n\n      if (localFile) {\n        // Convert base64 stored file back to a Blob\n        const base64Data = JSON.parse(localFile);\n        const byteCharacters = atob(base64Data.split(\",\")[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        blob = new Blob([byteArray], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n      } else {\n        // Fetch file from a predefined URL if not found in local storage\n        const response = await fetch(excelLinkUrl);\n        blob = await response.blob();\n      }\n\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Extract data from relevant worksheets\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          };\n        });\n\n        // Create a lookup map for Store labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label;\n        });\n\n        // Organize Calendar data by Month and Week\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Integrate Planning data and calculate financial metrics\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0;\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits;\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort data to ensure consistent ordering\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean)\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        // Update Redux store with processed data\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Initialize row data from Redux state\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  // Update row data when calendar data changes\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  // Define AG Grid column definitions\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...(calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: { value: number }) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: { value: number }) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    })),\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","dispatch","useDispatch","currentMonthIndex","useState","gridApi","setGridApi","calendarData","fileAdded","useSelector","state","fileData","useEffect","onGridReady","api","async","params","localFile","localStorage","getItem","blob","base64Data","JSON","parse","byteCharacters","atob","split","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","response","fetch","excelLinkUrl","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","headerName","children","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","map","month","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console","rowData","setRowData","items","flat","_calendarData$current3","_calendarData$current4","columnDefs","field","pinned","_month$children","item","cellStyle","rightAlignRule","valueFormatter","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef"],"sourceRoot":""}