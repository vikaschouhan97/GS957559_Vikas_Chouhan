{"version":3,"file":"static/js/164.4d2546b0.chunk.js","mappings":"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","sources":["contents/planning/index.tsx","contents/store/index.tsx","../node_modules/@mui/icons-material/DeleteForeverSharp.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport { defaultColDef, rightAlignRule, cellClassRules, excelLinkUrl } from \"../../constants\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  const onGridReady = async () => {\n    try {\n      const response = await fetch(excelLinkUrl);\n      const blob = await response.blob();\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Read \"Calendar\" worksheet\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        // Read \"Planning\" worksheet\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        // Read \"SKUs\" worksheet to get prices\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          }; // Store SKU price\n        });\n\n        // Read \"Store\" worksheet to get Labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label; // Store SKU price\n        });\n\n        // Extract Month & Week order from Calendar sheet\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Merge Planning data into groupedData and compute Sales Dollar\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0; // Get price, default to 0 if not found\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits; // Compute Sales Dollar\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort by monthOrder and then by weekOrder\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean) // Remove undefined entries\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...((calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: {value: number}) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: {value: number}) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    }))),\n  ];\n  \n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n","import { useCallback, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, IconButton } from \"@mui/material\";\nimport DeleteForeverSharpIcon from \"@mui/icons-material/DeleteForeverSharp\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IStoreData, setStoreData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"./index.css\";\nimport { excelLinkUrl } from \"../../constants\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  RowApiModule,\n]);\n\nexport const DeleteButtonRenderer = (props: any) => {\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    const updatedData = storeData\n      .filter((item: any) => item.ID !== props.data.ID)\n      .map((item, index) => ({\n        ...item,\n        seqNo: index + 1,\n      }));\n\n    dispatch(setStoreData(updatedData));\n  };\n  return (\n    <IconButton onClick={handleDelete} size=\"small\">\n      <DeleteForeverSharpIcon />\n    </IconButton>\n  );\n};\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\",\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer,\n    },\n    {\n      headerName: \"S.No.\",\n      field: \"seqNo\",\n      width: 100,\n      rowDrag: true,\n    },\n    { headerName: \"Store ID\", field: \"ID\", width: 150, editable: true },\n    { headerName: \"Store Name\", field: \"Label\", width: 250, editable: true },\n    { headerName: \"City\", field: \"City\", width: 200, editable: true },\n    { headerName: \"State\", field: \"State\", width: 100, editable: true },\n  ]);\n\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = storeData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setStoreData(newData));\n    } else return;\n  };\n\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter,\n  };\n\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    const response = await fetch(excelLinkUrl);\n    const blob = await response.blob();\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read \"Stores\" worksheet\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data\n      const formattedStoreData: IStoreData[] = storeData.map((row, index) => ({\n        seqNo: row[\"Seq No.\"] || index + 1,\n        ID: row[\"ID\"],\n        Label: row[\"Label\"],\n        City: row[\"City\"],\n        State: row[\"State\"],\n      }));\n      dispatch(setStoreData(formattedStoreData));\n    };\n\n    reader.readAsArrayBuffer(blob);\n  }, []);\n\n  const [gridApi, setGridApi] = useState<any>(null);\n\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1, // Recalculate sequence numbers\n      }));\n\n    dispatch(setStoreData(newOrder)); // Update Redux state\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={storeData}\n            columnDefs={columnDefs}\n            //@ts-ignore\n            defaultColDef={defaultColDef}\n            rowDragManaged={true}\n            onGridReady={onGridReady}\n            onDragStopped={onDragStopped}\n          />\n        </Box>\n      </Box>\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 21h12V7H6v14zm2.46-9.12 1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4h-3.5z\"\n}), 'DeleteForeverSharp');\nexports.default = _default;"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","dispatch","useDispatch","currentMonthIndex","useState","calendarData","useSelector","state","fileData","rowData","setRowData","children","map","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","month","_month$children","item","cellStyle","rightAlignRule","valueFormatter","params","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","onGridReady","async","response","fetch","excelLinkUrl","blob","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","Uint8Array","type","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console","TextFilterModule","NumberFilterModule","RowDragModule","ValidationModule","RowApiModule","DeleteButtonRenderer","props","IconButton","onClick","handleDelete","updatedData","data","index","seqNo","setStoreData","size","DeleteForeverSharpIcon","GridExample","containerStyle","useMemo","gridStyle","cellRenderer","rowDrag","editable","valueSetter","rowId","columnId","column","colId","newValue","newData","useCallback","setGridApi","api","binaryStr","formattedStoreData","City","State","gridApi","onDragStopped","_gridApi$getRenderedN","newOrder","getRenderedNodes","node","sx","style","rowDragManaged","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}