{"version":3,"file":"static/js/565.e2e6c8ef.chunk.js","mappings":"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","sources":["contents/planning/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport { defaultColDef, rightAlignRule, cellClassRules } from \"../../constants\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  const onGridReady = async () => {\n    try {\n      const response = await fetch(\"https://res.cloudinary.com/dga7peviw/raw/upload/v1741378505/GSIV25_-_Sample_Data_bzxej5.xlsx\");\n      const blob = await response.blob();\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Read \"Calendar\" worksheet\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        // Read \"Planning\" worksheet\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        // Read \"SKUs\" worksheet to get prices\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          }; // Store SKU price\n        });\n\n        // Read \"Store\" worksheet to get Labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label; // Store SKU price\n        });\n\n        // Extract Month & Week order from Calendar sheet\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Merge Planning data into groupedData and compute Sales Dollar\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0; // Get price, default to 0 if not found\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits; // Compute Sales Dollar\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort by monthOrder and then by weekOrder\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean) // Remove undefined entries\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    {\n      headerName: calendarData[currentMonthIndex]?.headerName,\n      children: calendarData[currentMonthIndex]?.children?.map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    },\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","_calendarData$current5","_calendarData$current6","_calendarData$current7","dispatch","useDispatch","currentMonthIndex","useState","calendarData","useSelector","state","fileData","rowData","setRowData","children","map","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","item","cellStyle","rightAlignRule","valueFormatter","params","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","onGridReady","async","response","fetch","blob","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","Uint8Array","type","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","month","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console"],"sourceRoot":""}