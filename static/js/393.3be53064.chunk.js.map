{"version":3,"file":"static/js/393.3be53064.chunk.js","mappings":"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","sources":["contents/planning/index.tsx","contents/sku/addSkuDialog.tsx","contents/sku/index.tsx","contents/store/addStoreDialog.tsx","contents/store/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport {\n  defaultColDef,\n  rightAlignRule,\n  cellClassRules,\n  excelLinkUrl,\n} from \"../../constants\";\n\n// Register AG Grid modules required for this component\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\n// Styled wrapper for the data grid\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  // Fetch and process Excel data on grid initialization\n  const onGridReady = async () => {\n    try {\n      const localFile = localStorage.getItem(\"file\");\n      let blob: Blob;\n\n      if (localFile) {\n        // Convert base64 stored file back to a Blob\n        const base64Data = JSON.parse(localFile);\n        const byteCharacters = atob(base64Data.split(\",\")[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        blob = new Blob([byteArray], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n      } else {\n        // Fetch file from a predefined URL if not found in local storage\n        const response = await fetch(excelLinkUrl);\n        blob = await response.blob();\n      }\n\n      if (!blob) return;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target?.result as ArrayBuffer;\n        const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n          type: \"array\",\n        });\n\n        // Extract data from relevant worksheets\n        const calendarSheet = workbook.Sheets[\"Calendar\"];\n        const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n        const planningSheet = workbook.Sheets[\"Planning\"];\n        const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n        const skusSheet = workbook.Sheets[\"SKUs\"];\n        const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n        // Create a lookup map for SKU prices\n        const skuPriceMap: Record<string, any> = {};\n        skusData.forEach(({ ID, Label, Price, Cost }) => {\n          skuPriceMap[ID] = {\n            price: parseFloat(Price),\n            Label,\n            cost: parseFloat(Cost),\n          };\n        });\n\n        // Create a lookup map for Store labels\n        const storesSheet = workbook.Sheets[\"Stores\"];\n        const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n        const storeMap: Record<string, number> = {};\n        storeData.forEach(({ ID, Label }) => {\n          storeMap[ID] = Label;\n        });\n\n        // Organize Calendar data by Month and Week\n        const monthOrder: string[] = [];\n        const weekOrder: string[] = [];\n        const groupedData: { [month: string]: any } = {};\n\n        calendarData.forEach((row) => {\n          const {\n            \"Month Label\": monthLabel,\n            \"Week Label\": weekLabel,\n            Week,\n          } = row;\n\n          if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n          if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n          if (!groupedData[monthLabel]) {\n            groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n          }\n\n          let weekData = groupedData[monthLabel].children.find(\n            (w: any) => w.week === Week\n          );\n          if (!weekData) {\n            weekData = { headerName: weekLabel, week: Week, children: [] };\n            groupedData[monthLabel].children.push(weekData);\n          }\n        });\n\n        // Integrate Planning data and calculate financial metrics\n        planningData.forEach(\n          ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n            const price = skuPriceMap[SKU].price || 0;\n            const cost = skuPriceMap[SKU].cost || 0;\n            const skuLabel = skuPriceMap[SKU].Label;\n            const storeLabel = storeMap[Store];\n            const salesDollar = price * SalesUnits;\n            const gmDollar = salesDollar - SalesUnits * cost;\n            const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n            Object.values(groupedData).forEach((monthData: any) => {\n              const weekData = monthData.children.find(\n                (w: any) => w.week === Week\n              );\n              if (weekData) {\n                weekData.children.push({\n                  Store,\n                  SKU,\n                  SalesUnits,\n                  SalesDollar: salesDollar.toFixed(2),\n                  skuLabel,\n                  storeLabel,\n                  gmDollar: gmDollar.toFixed(2),\n                  gmPercent,\n                });\n              }\n            });\n          }\n        );\n\n        // Sort data to ensure consistent ordering\n        const sortedData = monthOrder\n          .map((month) => groupedData[month])\n          .filter(Boolean)\n          .map((monthData) => ({\n            ...monthData,\n            children: monthData.children.sort(\n              (a: any, b: any) =>\n                weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n            ),\n          }));\n\n        // Update Redux store with processed data\n        dispatch(setCalendarData(sortedData));\n      };\n    } catch (error) {\n      //eslint-disable-next-line\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Initialize row data from Redux state\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  // Update row data when calendar data changes\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  // Define AG Grid column definitions\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    ...(calendarData ?? []).map((month) => ({\n      headerName: month.headerName,\n      children: (month.children ?? []).map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params: any): any => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params: { value: number }) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params: { value: number }) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    })),\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n","import { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { setAddSkuDialog, setSkuData } from \"../../slices/excelData\";\n\nexport default function AddSkuDialog() {\n  const dispatch = useDispatch();\n  const { addSkuDialog, skuData } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // State for form fields\n  const [sku, setSku] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [cost, setCost] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  // Validation states\n  const [error, setError] = useState(\"\");\n\n  // Check if ID already exists\n  const isIdExists = (id: string) =>\n    skuData.some((item: any) => item.ID === id);\n\n  const handleClose = () => {\n    dispatch(setAddSkuDialog(false));\n    setSku(\"\");\n    setPrice(\"\");\n    setCost(\"\");\n    setId(\"\");\n    setError(\"\");\n  };\n\n  const handleSave = () => {\n    if (!sku || !price || !cost || !id) {\n      setError(\"All fields are required.\");\n      return;\n    }\n    if (isIdExists(id)) {\n      setError(\"ID already exists. Please use a unique ID.\");\n      return;\n    }\n    if (isNaN(Number(price)) || isNaN(Number(cost))) {\n      setError(\"Price and Cost must be valid numbers.\");\n      return;\n    }\n    dispatch(\n      setSkuData([\n        ...skuData,\n        { ID: id, name: sku, price: parseFloat(price), cost: parseFloat(cost) },\n      ])\n    );\n    handleClose();\n  };\n\n  return (\n    <Dialog open={addSkuDialog} onClose={handleClose}>\n      <DialogTitle>Add New SKU</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"SKU\"\n          fullWidth\n          margin=\"dense\"\n          value={sku}\n          onChange={(e) => setSku(e.target.value)}\n        />\n        <TextField\n          label=\"Price ($)\"\n          fullWidth\n          margin=\"dense\"\n          value={price}\n          onChange={(e) => setPrice(e.target.value)}\n          error={isNaN(Number(price))}\n          helperText={isNaN(Number(price)) ? \"Enter a valid price\" : \"\"}\n        />\n        <TextField\n          label=\"Cost ($)\"\n          fullWidth\n          margin=\"dense\"\n          value={cost}\n          onChange={(e) => setCost(e.target.value)}\n          error={isNaN(Number(cost))}\n          helperText={isNaN(Number(cost)) ? \"Enter a valid cost\" : \"\"}\n        />\n        <TextField\n          label=\"ID\"\n          fullWidth\n          margin=\"dense\"\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          error={!!error}\n          helperText={error}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          sx={{\n            background: \"red\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"red\", opacity: 0.7 },\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          sx={{\n            background: \"gray\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"gray\", opacity: 0.7 },\n          }}\n          disabled={!sku || !price || !cost || !id}\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberEditorModule,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextEditorModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, Button } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ISkuData, setAddSkuDialog, setSkuData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"../store/index.css\";\nimport { DeleteButtonRenderer } from \"../store\";\nimport { excelLinkUrl } from \"../../constants\";\nimport AddSkuDialog from \"./addSkuDialog\";\n\n// Register AG Grid modules for features like filtering, row dragging, validation, and editing\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  NumberEditorModule,\n  TextEditorModule,\n  RowApiModule,\n]);\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n  const [gridApi, setGridApi] = useState<any>(null);\n  const { skuData } = useSelector((state: RootState) => state.fileData);\n\n  // Memoized styles to prevent unnecessary re-renders\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  // Column definitions for the AG Grid\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\",\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer, // Custom delete button component\n    },\n    { headerName: \"SKU\", field: \"name\", width: 300, editable: true },\n    { headerName: \"Price\", field: \"price\", width: 150, editable: true },\n    { headerName: \"Cost\", field: \"cost\", width: 150, editable: true },\n  ]);\n\n  // Handles cell value updates and updates Redux state\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = skuData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setSkuData(newData));\n    } else return;\n  };\n\n  // Default column definition for all columns\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter, // Assign custom value setter\n  };\n\n  // Handles grid initialization and data fetching\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    // Check if a file is stored in localStorage\n    const localFile = localStorage.getItem(\"file\");\n    let blob: Blob;\n\n    if (localFile) {\n      // Convert Base64 string to Blob\n      const base64Data = JSON.parse(localFile);\n      const byteCharacters = atob(base64Data.split(\",\")[1]); // Decode Base64\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      blob = new Blob([byteArray], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n    } else {\n      // Fetch the default Excel file from the server\n      const response = await fetch(excelLinkUrl);\n      blob = await response.blob();\n    }\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read the \"SKUs\" worksheet from the Excel file\n      const storesSheet = workbook.Sheets[\"SKUs\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data into a structured array\n      const formattedStoreData: ISkuData[] = storeData.map((row) => ({\n        ID: row[\"ID\"],\n        name: row[\"Label\"],\n        price: row[\"Price\"],\n        cost: row[\"Cost\"].toFixed(2), // Ensure cost is formatted correctly\n      }));\n\n      // Update Redux state with the formatted data\n      dispatch(setSkuData(formattedStoreData));\n    };\n\n    // Read the file as an ArrayBuffer\n    reader.readAsArrayBuffer(blob);\n  }, []);\n\n  // Handles reordering of rows after dragging\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    // Reorder rows and update Redux state\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1,\n      }));\n\n    dispatch(setSkuData(newOrder));\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={skuData} // Data for the grid\n            columnDefs={columnDefs} // Column definitions\n            //@ts-ignore\n            defaultColDef={defaultColDef} // Default column behavior\n            rowDragManaged={true} // Enable drag-and-drop row reordering\n            onGridReady={onGridReady} // Callback when grid is ready\n            onDragStopped={onDragStopped} // Handle row drag stop event\n          />\n        </Box>\n      </Box>\n      {/* Button to open the 'Add SKU' dialog */}\n      <Button\n        onClick={() => dispatch(setAddSkuDialog(true))}\n        sx={{\n          mt: 2,\n          background: \"gray\",\n          color: \"#ffff\",\n          px: 2,\n          \"&:hover\": { background: \"gray\", opacity: 0.7 },\n        }}\n      >\n        Add SKU\n      </Button>\n      {/* Dialog component to add a new SKU */}\n      <AddSkuDialog />\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\nimport { setAddStoreDialog, setStoreData } from \"../../slices/excelData\";\n\nexport default function AddStoreDialog() {\n  const dispatch = useDispatch();\n  const { addStoreDialog, storeData } = useSelector(\n    (state: RootState) => state.fileData\n  );\n\n  // State for form fields\n  const [store, setStore] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  // Validation states\n  const [error, setError] = useState(\"\");\n\n  // Check if ID already exists\n  const isIdExists = (id: string) =>\n    storeData.some((item: any) => item.ID === id);\n\n  const handleClose = () => {\n    dispatch(setAddStoreDialog(false));\n    setStore(\"\");\n    setCity(\"\");\n    setState(\"\");\n    setId(\"\");\n    setError(\"\");\n  };\n\n  const handleSave = () => {\n    if (!store || !city || !state || !id) {\n      setError(\"All fields are required.\");\n      return;\n    }\n\n    if (isIdExists(id)) {\n      setError(\"ID already exists. Please use a unique ID.\");\n      return;\n    }\n\n    dispatch(\n      setStoreData([\n        ...storeData,\n        {\n          seqNo: storeData.length + 1,\n          City: city,\n          State: state,\n          Label: store,\n          ID: id,\n        },\n      ])\n    );\n\n    handleClose();\n  };\n\n  return (\n    <Dialog open={addStoreDialog} onClose={handleClose}>\n      <DialogTitle>Add New Store</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Store\"\n          fullWidth\n          margin=\"dense\"\n          value={store}\n          onChange={(e) => setStore(e.target.value)}\n        />\n        <TextField\n          label=\"City\"\n          fullWidth\n          margin=\"dense\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n        />\n        <TextField\n          label=\"State\"\n          fullWidth\n          margin=\"dense\"\n          value={state}\n          onChange={(e) => setState(e.target.value)}\n        />\n        <TextField\n          label=\"ID\"\n          fullWidth\n          margin=\"dense\"\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          error={!!error}\n          helperText={error}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleClose}\n          sx={{\n            background: \"red\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"red\", opacity: 0.7 },\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          sx={{\n            background: \"gray\",\n            color: \"#ffff\",\n            \"&:hover\": { background: \"gray\", opacity: 0.7 },\n          }}\n          disabled={!store || !city || !state || !id}\n        >\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, Button, IconButton } from \"@mui/material\";\nimport DeleteForeverSharpIcon from \"@mui/icons-material/DeleteForeverSharp\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  IStoreData,\n  setAddStoreDialog,\n  setStoreData,\n} from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport \"./index.css\";\nimport { excelLinkUrl } from \"../../constants\";\nimport AddStoreDialog from \"./addStoreDialog\";\n\n// Register AG Grid modules\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  RowApiModule,\n]);\n\n// Custom delete button renderer component for the grid\nexport const DeleteButtonRenderer = (props: any) => {\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n  const dispatch = useDispatch();\n\n  // Function to handle deleting a row\n  const handleDelete = () => {\n    const updatedData = storeData\n      .filter((item: any) => item.ID !== props.data.ID)\n      .map((item, index) => ({\n        ...item,\n        seqNo: index + 1, // Reassign sequence numbers after deletion\n      }));\n\n    dispatch(setStoreData(updatedData));\n  };\n\n  return (\n    <IconButton onClick={handleDelete} size=\"small\">\n      <DeleteForeverSharpIcon />\n    </IconButton>\n  );\n};\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n\n  // Memoized styles to optimize performance\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  // Column definitions for AG Grid\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\", // Empty header for delete button column\n      field: \"delete\",\n      width: 50,\n      cellRenderer: DeleteButtonRenderer,\n    },\n    {\n      headerName: \"S.No.\",\n      field: \"seqNo\",\n      width: 100,\n      rowDrag: true, // Enable row dragging\n    },\n    { headerName: \"Store ID\", field: \"ID\", width: 150, editable: true },\n    { headerName: \"Store Name\", field: \"Label\", width: 250, editable: true },\n    { headerName: \"City\", field: \"City\", width: 200, editable: true },\n    { headerName: \"State\", field: \"State\", width: 100, editable: true },\n  ]);\n\n  // Function to update store data on cell value change\n  const handleValueSetter = (params: any) => {\n    const rowId = params.data.ID;\n    const columnId = params.column.colId;\n    if (params?.newValue) {\n      const newData = storeData?.map((item) =>\n        item.ID === rowId ? { ...item, [columnId]: params.newValue } : item\n      );\n      dispatch(setStoreData(newData));\n    }\n  };\n\n  // Default column definitions\n  const defaultColDef = {\n    width: 170,\n    valueSetter: handleValueSetter,\n  };\n\n  // Function to handle grid initialization and loading data\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    // Retrieve file data from localStorage if available\n    const localFile = localStorage.getItem(\"file\");\n    let blob: Blob;\n\n    if (localFile) {\n      const base64Data = JSON.parse(localFile);\n      const byteCharacters = atob(base64Data.split(\",\")[1]);\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      blob = new Blob([byteArray], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n    } else {\n      // Fetch default Excel file if local data is unavailable\n      const response = await fetch(excelLinkUrl);\n      blob = await response.blob();\n    }\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read \"Stores\" worksheet from Excel file\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data\n      const formattedStoreData: IStoreData[] = storeData.map((row, index) => ({\n        seqNo: row[\"Seq No.\"] || index + 1,\n        ID: row[\"ID\"],\n        Label: row[\"Label\"],\n        City: row[\"City\"],\n        State: row[\"State\"],\n      }));\n      dispatch(setStoreData(formattedStoreData));\n    };\n\n    reader.readAsArrayBuffer(blob);\n  }, [localStorage.getItem(\"file\"), dispatch]);\n\n  const [gridApi, setGridApi] = useState<any>(null);\n\n  // Function to update sequence numbers when row dragging stops\n  const onDragStopped = useCallback(() => {\n    if (!gridApi) return;\n\n    const newOrder = gridApi\n      ?.getRenderedNodes()\n      ?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1,\n      }));\n\n    dispatch(setStoreData(newOrder));\n  }, [gridApi, dispatch]);\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={storeData}\n            columnDefs={columnDefs}\n            //@ts-ignore\n            defaultColDef={defaultColDef}\n            rowDragManaged={true}\n            onGridReady={onGridReady}\n            onDragStopped={onDragStopped}\n          />\n        </Box>\n      </Box>\n      <Button\n        onClick={() => dispatch(setAddStoreDialog(true))}\n        sx={{\n          mt: 2,\n          background: \"gray\",\n          color: \"#ffff\",\n          px: 2,\n          \"&:hover\": { background: \"gray\", opacity: 0.7 },\n        }}\n      >\n        Add Store\n      </Button>\n      <AddStoreDialog />\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","dispatch","useDispatch","currentMonthIndex","useState","calendarData","useSelector","state","fileData","rowData","setRowData","children","map","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","month","_month$children","item","cellStyle","rightAlignRule","valueFormatter","params","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","onGridReady","async","localFile","localStorage","getItem","blob","base64Data","JSON","parse","byteCharacters","atob","split","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","response","fetch","excelLinkUrl","reader","FileReader","readAsArrayBuffer","onload","e","_e$target","arrayBuffer","target","result","workbook","XLSX","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","filter","Boolean","sort","a","b","indexOf","setCalendarData","error","console","AddSkuDialog","addSkuDialog","skuData","sku","setSku","setPrice","setCost","id","setId","setError","handleClose","setAddSkuDialog","_jsxs","Dialog","open","onClose","DialogTitle","DialogContent","TextField","label","fullWidth","margin","onChange","isNaN","Number","helperText","DialogActions","Button","onClick","sx","color","opacity","handleSave","some","isIdExists","setSkuData","name","disabled","TextFilterModule","NumberFilterModule","RowDragModule","ValidationModule","RowApiModule","GridExample","gridApi","setGridApi","containerStyle","useMemo","gridStyle","cellRenderer","DeleteButtonRenderer","editable","valueSetter","rowId","data","columnId","column","colId","newValue","newData","useCallback","api","binaryStr","formattedStoreData","onDragStopped","_gridApi$getRenderedN","newOrder","getRenderedNodes","node","index","seqNo","style","rowDragManaged","mt","px","AddStoreDialog","addStoreDialog","store","setStore","city","setCity","setState","setAddStoreDialog","setStoreData","City","State","props","IconButton","handleDelete","updatedData","size","DeleteForeverSharpIcon","rowDrag"],"sourceRoot":""}