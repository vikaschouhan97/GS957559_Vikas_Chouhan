{"version":3,"file":"static/js/164.8dcb9b31.chunk.js","mappings":"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","sources":["contents/planning/index.tsx","contents/store/index.tsx","../node_modules/@mui/icons-material/DeleteForeverSharp.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  CellStyleModule,\n  ClientSideRowModelModule,\n  ModuleRegistry,\n  NumberEditorModule,\n  TextEditorModule,\n} from \"ag-grid-community\";\nimport { ColDef, ColGroupDef } from \"ag-grid-community\";\nimport { Box, styled } from \"@mui/material\";\nimport \"./index.css\";\nimport * as XLSX from \"xlsx\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCalendarData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\nimport { defaultColDef, rightAlignRule, cellClassRules } from \"../../constants\";\n\nModuleRegistry.registerModules([\n  NumberEditorModule,\n  TextEditorModule,\n  CellStyleModule,\n  ClientSideRowModelModule,\n]);\n\nexport const MainWrapper = styled(Box)(() => ({\n  width: \"100%\",\n  marginLeft: \"170px\",\n  height: \"93%\",\n  marginTop: \"60px\",\n  padding: \"16px\",\n  background: \"#d0d0d0\",\n}));\n\nconst DataViewer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [currentMonthIndex] = useState(0);\n  const { calendarData } = useSelector((state: RootState) => state.fileData);\n\n  const onGridReady = async () => {\n    const response = await fetch('/assets/file/sampleFile.xlsx');\n    const blob = await response.blob();\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read \"Calendar\" worksheet\n      const calendarSheet = workbook.Sheets[\"Calendar\"];\n      const calendarData: any[] = XLSX.utils.sheet_to_json(calendarSheet);\n\n      // Read \"Planning\" worksheet\n      const planningSheet = workbook.Sheets[\"Planning\"];\n      const planningData: any[] = XLSX.utils.sheet_to_json(planningSheet);\n\n      // Read \"SKUs\" worksheet to get prices\n      const skusSheet = workbook.Sheets[\"SKUs\"];\n      const skusData: any[] = XLSX.utils.sheet_to_json(skusSheet);\n\n      // Create a lookup map for SKU prices\n      const skuPriceMap: Record<string, any> = {};\n      skusData.forEach(({ ID, Label, Price, Cost }) => {\n        skuPriceMap[ID] = {\n          price: parseFloat(Price),\n          Label,\n          cost: parseFloat(Cost),\n        }; // Store SKU price\n      });\n\n      // Read \"Store\" worksheet to get Labels\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      const storeMap: Record<string, number> = {};\n      storeData.forEach(({ ID, Label }) => {\n        storeMap[ID] = Label; // Store SKU price\n      });\n\n      // Extract Month & Week order from Calendar sheet\n      const monthOrder: string[] = [];\n      const weekOrder: string[] = [];\n      const groupedData: { [month: string]: any } = {};\n\n      calendarData.forEach((row) => {\n        const {\n          \"Month Label\": monthLabel,\n          \"Week Label\": weekLabel,\n          Week,\n        } = row;\n\n        if (!monthOrder.includes(monthLabel)) monthOrder.push(monthLabel);\n        if (!weekOrder.includes(Week)) weekOrder.push(Week);\n\n        if (!groupedData[monthLabel]) {\n          groupedData[monthLabel] = { headerName: monthLabel, children: [] };\n        }\n\n        let weekData = groupedData[monthLabel].children.find(\n          (w: any) => w.week === Week\n        );\n        if (!weekData) {\n          weekData = { headerName: weekLabel, week: Week, children: [] };\n          groupedData[monthLabel].children.push(weekData);\n        }\n      });\n\n      // Merge Planning data into groupedData and compute Sales Dollar\n      planningData.forEach(\n        ({ Store, SKU, Week, \"Sales Units\": SalesUnits }) => {\n          const price = skuPriceMap[SKU].price || 0; // Get price, default to 0 if not found\n          const cost = skuPriceMap[SKU].cost || 0;\n          const skuLabel = skuPriceMap[SKU].Label;\n          const storeLabel = storeMap[Store];\n          const salesDollar = price * SalesUnits; // Compute Sales Dollar\n          const gmDollar = salesDollar - SalesUnits * cost;\n          const gmPercent = Math.trunc((gmDollar / salesDollar) * 100) || 0;\n\n          Object.values(groupedData).forEach((monthData: any) => {\n            const weekData = monthData.children.find(\n              (w: any) => w.week === Week\n            );\n            if (weekData) {\n              weekData.children.push({\n                Store,\n                SKU,\n                SalesUnits,\n                SalesDollar: salesDollar.toFixed(2),\n                skuLabel,\n                storeLabel,\n                gmDollar: gmDollar.toFixed(2),\n                gmPercent,\n              });\n            }\n          });\n        }\n      );\n\n      // Sort by monthOrder and then by weekOrder\n      const sortedData = monthOrder\n        .map((month) => groupedData[month])\n        .filter(Boolean) // Remove undefined entries\n        .map((monthData) => ({\n          ...monthData,\n          children: monthData.children.sort(\n            (a: any, b: any) =>\n              weekOrder.indexOf(a.week) - weekOrder.indexOf(b.week)\n          ),\n        }));\n\n      dispatch(setCalendarData(sortedData));\n    };\n\n    reader.readAsArrayBuffer(blob);\n  };\n\n  const [rowData, setRowData] = useState(\n    calendarData[currentMonthIndex]?.children\n      ?.map((items) => [...items.children])\n      .flat() || []\n  );\n\n  useEffect(() => {\n    setRowData(\n      calendarData[currentMonthIndex]?.children\n        ?.map((items) => [...items.children])\n        .flat() || []\n    );\n  }, [calendarData]);\n\n  const columnDefs: (ColDef | ColGroupDef)[] = [\n    { headerName: \"Store\", field: \"storeLabel\", pinned: \"left\", width: 250 },\n    { headerName: \"SKU\", field: \"skuLabel\", pinned: \"left\", width: 250 },\n    {\n      headerName: calendarData[currentMonthIndex]?.headerName,\n      children: calendarData[currentMonthIndex]?.children?.map((item) => ({\n        headerName: item.headerName,\n        children: [\n          {\n            headerName: \"Sales Units\",\n            field: \"SalesUnits\",\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"Sales Dollars\",\n            field: \"SalesDollar\",\n            valueFormatter: (params) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Dollars\",\n            field: \"gmDollar\",\n            valueFormatter: (params) => `$${params.value}`,\n            cellStyle: rightAlignRule,\n            width: 130,\n          },\n          {\n            headerName: \"GM Percent\",\n            field: \"gmPercent\",\n            valueFormatter: (params) => `${params.value}%`,\n            cellStyle: rightAlignRule,\n            cellClassRules,\n            width: 130,\n          },\n        ],\n      })),\n    },\n  ];\n\n  return (\n    <MainWrapper>\n      <AgGridReact\n        rowData={rowData}\n        columnDefs={columnDefs}\n        modules={[ClientSideRowModelModule]}\n        debug\n        defaultColDef={defaultColDef}\n        onGridReady={onGridReady}\n      />\n    </MainWrapper>\n  );\n};\n\nexport default DataViewer;\n","import { useCallback, useMemo, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  ClientSideRowModelModule,\n  ColDef,\n  GridReadyEvent,\n  ModuleRegistry,\n  NumberFilterModule,\n  RowApiModule,\n  RowDragModule,\n  TextFilterModule,\n  ValidationModule,\n} from \"ag-grid-community\";\nimport { MainWrapper } from \"../planning\";\nimport * as XLSX from \"xlsx\";\nimport { Box, IconButton } from \"@mui/material\";\nimport DeleteForeverSharpIcon from \"@mui/icons-material/DeleteForeverSharp\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStoreData } from \"../../slices/excelData\";\nimport { RootState } from \"../../store\";\n\nModuleRegistry.registerModules([\n  TextFilterModule,\n  NumberFilterModule,\n  RowDragModule,\n  ClientSideRowModelModule,\n  ValidationModule,\n  RowApiModule,\n]);\n\nconst GridExample = () => {\n  const dispatch = useDispatch();\n\n  const { storeData } = useSelector((state: RootState) => state.fileData);\n\n  const containerStyle = useMemo(() => ({ width: \"100%\", height: \"100%\" }), []);\n  const gridStyle = useMemo(() => ({ height: \"100%\", width: \"100%\" }), []);\n\n  const DeleteButtonRenderer = (props: any) => {\n    const { storeData } = useSelector((state: RootState) => state.fileData);\n    const handleDelete = () => {\n      const updatedData = storeData\n        .filter((item: any) => item.ID !== props.data.ID)\n        .map((item, index) => ({\n          ...item,\n          seqNo: index + 1,\n        }));\n\n      dispatch(setStoreData(updatedData));\n    };\n    return (\n      <IconButton onClick={handleDelete} size=\"small\" color=\"error\">\n        <DeleteForeverSharpIcon />\n      </IconButton>\n    );\n  };\n  const [columnDefs] = useState<ColDef[]>([\n    {\n      headerName: \"\",\n      field: \"delete\",\n      width: 100,\n      cellRenderer: DeleteButtonRenderer,\n    },\n    {\n      headerName: \"S.No.\",\n      field: \"seqNo\",\n      width: 100,\n      rowDrag: true,\n      editable: true,\n    },\n    { headerName: \"Store ID\", field: \"ID\", width: 150, editable: true },\n    { headerName: \"Store Name\", field: \"Label\", width: 250, editable: true },\n    { headerName: \"City\", field: \"City\", width: 200, editable: true },\n    { headerName: \"State\", field: \"State\", width: 100, editable: true },\n  ]);\n  const defaultColDef = useMemo<ColDef>(() => {\n    return {\n      width: 170,\n    };\n  }, []);\n\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\n    setGridApi(params.api);\n\n    const response = await fetch(\"/assets/file/sampleFile.xlsx\");\n    const blob = await response.blob();\n\n    if (!blob) return;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result as string;\n      const workbook = XLSX.read(binaryStr, { type: \"binary\" });\n\n      // Read \"Stores\" worksheet\n      const storesSheet = workbook.Sheets[\"Stores\"];\n      const storeData: any[] = XLSX.utils.sheet_to_json(storesSheet);\n\n      // Format the data\n      const formattedStoreData: any = storeData.map((row, index) => ({\n        seqNo: row[\"Seq No.\"] || index + 1,\n        ID: row[\"ID\"],\n        Label: row[\"Label\"],\n        City: row[\"City\"],\n        State: row[\"State\"],\n      }));\n      dispatch(setStoreData(formattedStoreData));\n    };\n\n    reader.readAsArrayBuffer(blob);\n  }, []);\n\n  const [gridApi, setGridApi] = useState<any>(null);\n\n  const onDragStopped = useCallback(\n    () => {\n      if (!gridApi) return;\n\n      const newOrder = gridApi?.getRenderedNodes()?.map((node: any, index: number) => ({\n        ...node.data,\n        seqNo: index + 1, // Recalculate sequence numbers\n      }));\n\n      dispatch(setStoreData(newOrder)); // Update Redux state\n    },\n    [gridApi, dispatch]\n  );\n\n  return (\n    <MainWrapper sx={{ height: \"85%\" }}>\n      <Box style={containerStyle}>\n        <Box style={gridStyle}>\n          <AgGridReact\n            rowData={storeData}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            rowDragManaged={true}\n            onGridReady={onGridReady}\n            onDragStopped={onDragStopped}\n          />\n        </Box>\n      </Box>\n    </MainWrapper>\n  );\n};\n\nexport default GridExample;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 21h12V7H6v14zm2.46-9.12 1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4h-3.5z\"\n}), 'DeleteForeverSharp');\nexports.default = _default;"],"names":["ModuleRegistry","registerModules","NumberEditorModule","TextEditorModule","CellStyleModule","ClientSideRowModelModule","MainWrapper","styled","Box","width","marginLeft","height","marginTop","padding","background","DataViewer","_calendarData$current","_calendarData$current2","_calendarData$current5","_calendarData$current6","_calendarData$current7","dispatch","useDispatch","currentMonthIndex","useState","calendarData","useSelector","state","fileData","rowData","setRowData","children","map","items","flat","useEffect","_calendarData$current3","_calendarData$current4","columnDefs","headerName","field","pinned","item","cellStyle","rightAlignRule","valueFormatter","params","concat","value","cellClassRules","_jsx","AgGridReact","modules","debug","defaultColDef","onGridReady","async","response","fetch","blob","reader","FileReader","onload","e","_e$target","binaryStr","target","result","workbook","XLSX","type","calendarSheet","Sheets","sheet_to_json","planningSheet","planningData","skusSheet","skusData","skuPriceMap","forEach","_ref","ID","Label","Price","Cost","price","parseFloat","cost","storesSheet","storeData","storeMap","_ref2","monthOrder","weekOrder","groupedData","row","monthLabel","weekLabel","Week","includes","push","weekData","find","w","week","_ref3","Store","SKU","SalesUnits","skuLabel","storeLabel","salesDollar","gmDollar","gmPercent","Math","trunc","Object","values","monthData","SalesDollar","toFixed","sortedData","month","filter","Boolean","sort","a","b","indexOf","setCalendarData","readAsArrayBuffer","TextFilterModule","NumberFilterModule","RowDragModule","ValidationModule","RowApiModule","GridExample","containerStyle","useMemo","gridStyle","cellRenderer","props","IconButton","onClick","handleDelete","updatedData","data","index","seqNo","setStoreData","size","color","DeleteForeverSharpIcon","rowDrag","editable","useCallback","setGridApi","api","formattedStoreData","City","State","gridApi","onDragStopped","_gridApi$getRenderedN","newOrder","getRenderedNodes","node","sx","style","rowDragManaged","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}